
#Область ПрограммныйИнтерфейс

// Заменяет повторное вхождение символа на одиночное.
//
// Параметры:
//  Текст	 - Строка - Обрабатываемый текст;
//  Символ	 - Строка - Исключаемый символ.
// 
// Возвращаемое значение:
//  Строка - обработанный текст.
//
Функция СократитьПовторноеВхождениеСимвола(Текст, Символ) Экспорт

	ВременныйТекст         = Текст;
	ПозицияДвойногоСимвола = СтрНайти(ВременныйТекст, Символ + Символ);

	Пока Не ПозицияДвойногоСимвола = 0 Цикл
		ВременныйТекст         = СтрЗаменить(ВременныйТекст, Символ + Символ, Символ);
		ПозицияДвойногоСимвола = СтрНайти(ВременныйТекст, Символ + Символ);
	КонецЦикла;

	Возврат ВременныйТекст;

КонецФункции

// Возвращает текстовое представление числа с единицей измерения в правильном склонении и числе.
//
// Параметры:
//  Число                       - Число  - любое целое число.
//	ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной,
//										   для двух и для пяти единиц, разделитель - запятая.
//
// Возвращаемое значение:
//  Строка - текстовое представление количества единиц, число записывается цифрами.
//
// Примеры:
//	ЧислоЦифрамиПредметИсчисленияПрописью(23,  НСтр("ru='минуту,минуты,минут';vi='phút,phút,phút'")); // Вернет "23 минуты".
//	ЧислоЦифрамиПредметИсчисленияПрописью(15,  НСтр("ru='минуту,минуты,минут';vi='phút,phút,phút'")); // Вернет "15 минут".
//
Функция ЧислоЦифрамиПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления) Экспорт

	Результат = Формат(Число,"ЧН=0");

	МассивПредставлений = Новый Массив;

	Позиция = СтрНайти(ПараметрыПредметаИсчисления, ",");
	Пока Позиция > 0 Цикл

		Значение = СокрЛП(Лев(ПараметрыПредметаИсчисления, Позиция-1));

		ПараметрыПредметаИсчисления = Сред(ПараметрыПредметаИсчисления, Позиция + 1);

		МассивПредставлений.Добавить(Значение);

		Позиция = СтрНайти(ПараметрыПредметаИсчисления, ",");

	КонецЦикла;

	Если СтрДлина(ПараметрыПредметаИсчисления) > 0 Тогда
		Значение = СокрЛП(ПараметрыПредметаИсчисления);
		МассивПредставлений.Добавить(Значение);
	КонецЕсли;

	Если Число >= 100 Тогда
		Число = Число - Цел(Число / 100)*100;
	КонецЕсли;

	Если Число > 20 Тогда
		Число = Число - Цел(Число/10)*10;
	КонецЕсли;

	Если Число = 1 Тогда
		Результат = Результат + " " + МассивПредставлений[0];
	ИначеЕсли Число > 1 И Число < 5 Тогда
		Результат = Результат + " " + МассивПредставлений[1];
	Иначе
		Результат = Результат + " " + МассивПредставлений[2];
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает текстовое представление единицы измерения в правильном склонении и числе.
//
// Параметры:
//  Число                       - Число - любое целое число.
//  ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной,
//                                для двух и для пяти единиц, разделитель - запятая.
//                                Пример: "минуту,минуты,минут".
// 
// Возвращаемое значение:
//  Строка - текстовое представление единицы измерения.
//
Функция ПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления) Экспорт

	Результат = "";

	МассивПредставлений = Новый Массив;

	Позиция = СтрНайти(ПараметрыПредметаИсчисления, ",");
	Пока Позиция > 0 Цикл
		Значение = СокрЛП(Лев(ПараметрыПредметаИсчисления, Позиция-1));
		ПараметрыПредметаИсчисления = Сред(ПараметрыПредметаИсчисления, Позиция + 1);
		МассивПредставлений.Добавить(Значение);
		Позиция = СтрНайти(ПараметрыПредметаИсчисления, ",");
	КонецЦикла;

	Если СтрДлина(ПараметрыПредметаИсчисления) > 0 Тогда
		Значение = СокрЛП(ПараметрыПредметаИсчисления);
		МассивПредставлений.Добавить(Значение);
	КонецЕсли;

	Если Число >= 100 Тогда
		Число = Число - Цел(Число / 100)*100;
	КонецЕсли;

	Если Число > 20 Тогда
		Число = Число - Цел(Число/10)*10;
	КонецЕсли;

	Если Число = 1 Тогда
		Результат = МассивПредставлений[0];
	ИначеЕсли Число > 1 И Число < 5 Тогда
		Результат = МассивПредставлений[1];
	Иначе
		Результат = МассивПредставлений[2];
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Принимает строку почтового адреса в виде "name <addr@dom>".
//
// Параметры:
//  АдресЭлектроннойПочтыСтр - Строка - Адрес электронной почты.
// 
// Возвращаемое значение:
//  Результат - (Структура)
//   * Адрес           - Строка - addr@dom;
//   * ОтображаемоеИмя - Строка - name;
//   * Пользователь    - Строка - addr;
//   * Домен           - Строка - dom.
//
Функция РазложитьПредставлениеАдресаЭлектроннойПочты(Знач АдресЭлектроннойПочтыСтр,
	НайтиСоздатьАдресата = Истина) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Адрес", "");
	Результат.Вставить("ОтображаемоеИмя", "");
	Результат.Вставить("Пользователь", "");
	Результат.Вставить("Домен", "");
	Результат.Вставить("ПолноеИмя", "");
	Результат.Вставить("Адресат", Неопределено);
	
	АдресЭлектроннойПочтыСтр = СокрЛП(АдресЭлектроннойПочтыСтр);

	Поз = СтрНайти(АдресЭлектроннойПочтыСтр, "@");
	Если Поз = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	СтрокаАдреса = "";
	ПозицияПервогоСимволаАдреса = 0;
	ПозицияПоследнегоСимволаАдреса = 0;
	
	// Идем влево от @
	Для Индекс = 0 По Поз - 1 Цикл

		ИндексВСтроке = Поз - Индекс;
		СтрокаАдресаПроверка = Сред(АдресЭлектроннойПочтыСтр, ИндексВСтроке, 1) + СтрокаАдреса;

		Если СтрокаСодержитТолькоДопустимыеСимволы(СтрокаАдресаПроверка) Тогда
			СтрокаАдреса = СтрокаАдресаПроверка;
			ПозицияПервогоСимволаАдреса = ИндексВСтроке;
		Иначе
			Прервать;
		КонецЕсли;

	КонецЦикла;

	// Идем вправо от @
	Для ИндексВСтроке = Поз + 1 По СтрДлина(АдресЭлектроннойПочтыСтр) Цикл

		СтрокаАдресаПроверка = СтрокаАдреса + Сред(АдресЭлектроннойПочтыСтр, ИндексВСтроке, 1);

		Если СтрокаСодержитТолькоДопустимыеСимволы(СтрокаАдресаПроверка) Тогда
			СтрокаАдреса = СтрокаАдресаПроверка;
			ПозицияПоследнегоСимволаАдреса = ИндексВСтроке;
		Иначе
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Результат.Адрес = СтрокаАдреса;

	// Слева от адреса берем представление
	Результат.ОтображаемоеИмя = Лев(АдресЭлектроннойПочтыСтр, ПозицияПервогоСимволаАдреса - 2);
	Результат.ОтображаемоеИмя = СокрЛП(Результат.ОтображаемоеИмя);

	Если Не СтроковыеФункцииКлиентСервер.ЭтоАдресЭлектроннойПочты(Результат.Адрес) Тогда
		Результат.Адрес = "";

	Иначе
		Поз = СтрНайти(Результат.Адрес, "@");

		Результат.Пользователь = Лев(Результат.Адрес, Поз - 1);
		Результат.Домен = Сред(Результат.Адрес, Поз + 1);

	КонецЕсли;

	Если ЗначениеЗаполнено(Результат.ОтображаемоеИмя) Тогда
		Результат.ПолноеИмя = 
			СтрШаблон(
				"%1 <%2>", Результат.ОтображаемоеИмя, Результат.Адрес);
	Иначе
		Результат.ПолноеИмя = Результат.Адрес;
	КонецЕсли;
	
	//Если НайтиСоздатьАдресата Тогда
	//	Результат.Адресат = РаботаСПочтойВызовСервера.АдресатПочтовогоСообщенияИзАдресата(Результат.ПолноеИмя,
	//		СтрокаАдреса);
	//КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Формирует текст ошибки для записи в протокол событий.
//
// Параметры:
//  ОбщееОписаниеОшибки - Строка - Общая информация об ошибке;
//  ПодробнаяИнформация - Строка - Подробности произошедшего;
//  Уточнения           - Строка - Дополнительные сведения об ошибке.
// 
// Возвращаемое значение:
//  Строка - Сформированный текст ошибки.
//
Функция СформироватьПредставлениеОшибки(ОбщееОписаниеОшибки, ПодробнаяИнформация, Уточнения = "") Экспорт

	Шаблон = 
		"ru = '%1
         |
         |#Текст ошибки (для администратора):#
         |%2
         |
         |Дополнительные сведения:
         |%3'; en = '%1
         |
         |#Error details (for administrator):#
         |%2
         |
         |Additional data:
         |%3'; vi = '%1
         |
         |#Error details (for administrator):#
         |%2
         |
         |Additional data:
         |%3'";

	Возврат СтрШаблон(НСтр(Шаблон), ОбщееОписаниеОшибки, ПодробнаяИнформация, Уточнения);

КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРЕДСТАВЛЕНИЕМ РАЗМЕРОВ

// Принимает размер в байтах.
// Возвращает строку, например: 7.2 Кбайт, 35 Кбайт, 5.5 Мбайт, 12 Мбайт
Функция ПолучитьРазмерСтрокой(Размер) Экспорт
	
	Если Размер = 0 Тогда
		Возврат "-";
	ИначеЕсли Размер < 1024 * 10 Тогда // < 10 Кб
		Возврат ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 Кб'; en = '%1 Kb'; vi = '%1 Kb'"),
			Формат(Макс(1, Окр(Размер / 1024, 1, 1)), "ЧГ=0"));
	ИначеЕсли Размер < 1024 * 1024 Тогда // < 1 Мб
		Возврат ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 Кб'; en = '%1 Kb'; vi = '%1 Kb'"),
			Формат(Цел(Размер / 1024), "ЧГ=0"));
	ИначеЕсли Размер < 1024 * 1024 * 10 Тогда // < 10 Мб
		Возврат ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 Мб'; en = '%1 Mb'; vi = '%1 Mb'"),
			Формат(Окр(Размер / 1024 / 1024, 1, 1), "ЧГ=0"));
	Иначе // >= 10 Мб
		Возврат ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 Мб'; en = '%1 Mb'; vi = '%1 Mb'"),
			Формат(Цел(Размер / 1024 / 1024), "ЧГ=0"));
	КонецЕсли;
	
КонецФункции

// Ищет подстроку в строке, после указанной позиции
//
Функция НайтиПосле(Строка, Подстрока, НачальнаяПозиция = 0) Экспорт
	
	Если СтрДлина(Строка) <= НачальнаяПозиция Тогда
		Возврат 0;
	КонецЕсли;
	
	Позиция = СтрНайти(Строка, Подстрока, НаправлениеПоиска.СНачала, НачальнаяПозиция + 1);
	Возврат Позиция;
	
КонецФункции

// Проверяет строку на формат адреса электронной почты
// проверка не точная но основные элементы на месте
//
Функция ЭтоАдресЭлектроннойПочты(АдресЭлектроннойПочты) Экспорт
	
	Поз = Найти(АдресЭлектроннойПочты, "@");
	Если Поз = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СтрЧислоВхождений(АдресЭлектроннойПочты, "@") <> 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Прав(АдресЭлектроннойПочты, 1) = "."
		Или Лев(АдресЭлектроннойПочты, 1) = "." Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Найти(АдресЭлектроннойПочты, "..") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пользователь = Лев(АдресЭлектроннойПочты, Поз - 1);
	Если СтрДлина(Пользователь) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Сервер = Сред(АдресЭлектроннойПочты, Поз + 1);
	Если СтрДлина(Сервер) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Поз = Найти(Сервер, ".");
	Если Поз = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДопустимыеСимволыЛокальнойЧасти = "+-.0123456789@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz";
	Для НомерСимвола = 1 По СтрДлина(Пользователь) Цикл
		Если Найти(ДопустимыеСимволыЛокальнойЧасти, Сред(Пользователь, НомерСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ДопустимыеСимволыДоменнойЧасти = "-.0123456789@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz";
	Для НомерСимвола = 1 По СтрДлина(Сервер) Цикл
		Если Найти(ДопустимыеСимволыДоменнойЧасти, Сред(Сервер, НомерСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Преобразует длительность интервала времени в строку вида час:мин.
//
// Параметры
//  Длительность – Число – длительность интервала времени в секундах. 
//
//  ПредставлениеНуля – Строка – представление интервала нулевой длительности. 
//
// Возвращаемое значение:
//   Строка – представление интервала в виде час:мин.
//
Функция ЧислоВСтроку(Длительность, ПредставлениеНуля = "00:00") Экспорт 
	
	Если Длительность = 0 Тогда
		Возврат ПредставлениеНуля;
	КонецЕсли;
	
	Час = Цел(Длительность / 3600);
	Мин = (Длительность - Час*3600) / 60;
	
	Возврат Формат(Час, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") + ":" + Формат(Мин, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=");
	
КонецФункции

// Преобразует строку вида час:мин в длительность интервала времени.
//
// Параметры
//  ДлительностьСтр – Строка – представление интервала времени в виде строки час:мин. 
//
// Возвращаемое значение:
//   Число – длительность интервала времени в секундах.
//
Функция ЧислоИзСтроки(ДлительностьСтр) Экспорт 
	
	Если Не ЗначениеЗаполнено(ДлительностьСтр) Тогда 
		Возврат 0;
	КонецЕсли;

	Поз = Найти(ДлительностьСтр, ":");
	Если Поз = 0 Тогда 
		Возврат 0;
	КонецЕсли;

	Час = Лев(ДлительностьСтр, Поз-1);
	Мин = Сред(ДлительностьСтр, Поз+1);
	
	Возврат Число(Час) * 3600 + Число(Мин) * 60;
	
КонецФункции

// Преобразует строку вида час:мин в дату.
//
// Параметры
//  ДлительностьСтр – Строка – представление интервала времени в виде строки час:мин. 
//
// Возвращаемое значение:
//   дата – дата в виде ДатаВремя.
Функция ДатаИзСтрокиДатаВремя(ДлительностьСтр) Экспорт
	
	Если Не ЗначениеЗаполнено(ДлительностьСтр) Тогда
		Возврат Дата(1, 1, 1, 0, 0, 0);
	КонецЕсли;
	
	Строки = СтрРазделить(ДлительностьСтр, ":");
	
	Возврат Дата(1, 1, 1, Число(Строки[0]), Число(Строки[1]), 0)
	
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтрокаСодержитТолькоДопустимыеСимволы(АдресЭлектроннойПочты)

	ДопустимыеСимволы = "-.0123456789@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz";

	Для НомерСимвола = 1 По СтрДлина(АдресЭлектроннойПочты) Цикл

		Если СтрНайти(ДопустимыеСимволы, Сред(АдресЭлектроннойПочты, НомерСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;

	КонецЦикла;

	Возврат Истина;

КонецФункции

Функция ОтформатироватьДату(Дата) Экспорт
	
	Возврат Формат(Дата, "ДФ='dd.MM.yyyy HH:mm:ss'; ДП='01.01.0001 0:00:00'");
	
КонецФункции

// Формирует представление файла с указанием его размера.
//
// Параметры:
//  ПредставлениеФайла	 - Строка - Представление файла;
//  Размер				 - Число - Размер файла.
//
Процедура СформироватьПредставлениеРазмераФайла(ПредставлениеФайла, Размер) Экспорт

	Если Не ЗначениеЗаполнено(Размер) Тогда
		Размер = 0;
	КонецЕсли;

	Если Размер >= 0 И Размер < 1024 Тогда

		РазмерСтрокой = Формат(Размер, "ЧГ=");
		Представление = НСтр("en='b';ru='б';vi='b'");

	ИначеЕсли Размер >= 1024 И Размер < 1024 * 1024 Тогда
		РазмерСтрокой = Формат(Размер/1024, "ЧДЦ=0; ЧГ=");
		Представление = НСтр("en='Kb';ru='Кб';vi='Kb'");

	ИначеЕсли Размер >= 1024*1024 Тогда

		РазмерСтрокой = Формат(Размер/(1024*1024), "ЧДЦ=0; ЧГ=");
		Представление = НСтр("en='Mb';ru='Мб';vi='Mb'");

	КонецЕсли;

	ПредставлениеФайла = СтрШаблон("%1, %2 %3",
		ПредставлениеФайла, РазмерСтрокой, Представление);

КонецПроцедуры

// Проверяет является ли это Строка строкой в формате JSON
Функция ЭтоСтрокаJSON(Строка) Экспорт
	
	Возврат Лев(Строка, 1) = "{" Или Лев(Строка, 1) = "[";
	
КонецФункции

// Формирует текстовое представление даты.
//
// Параметры:
//  Дата - Дата - Дата, текстовое представление которой необходимо сформировать.
//  ВесьДень - Булево - Признак того, что в дату не нужно включать время.
//  ПолнаяДата - Булево - Признак того, что дату следует формировать в виде полной даты.
//  КраткоеОписание - Булево - Флаг, определяющий следует ли использовать краткий формат даты.
//
// Возвращаемое значение:
//  Строка - Текстовое представление даты.
//
Функция СформироватьТекстовоеОписаниеДаты(Дата, ВесьДень, ПолнаяДата, КраткоеОписание, ВключатьОписаниеГода) Экспорт
	
	ФорматДаты = "";
	
	ПериодСледующийГод = Новый СтандартныйПериод(ВариантСтандартногоПериода.СледующийГод);
	НачалоСледующегоГода = ПериодСледующийГод.ДатаНачала;
	ПериодЭтотГод = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотГод);
	НачалоЭтогоГода = ПериодЭтотГод.ДатаНачала;
	ПериодЗавтра = Новый СтандартныйПериод(ВариантСтандартногоПериода.Завтра);
	НачалоЗавтрашнегоДня = ПериодЗавтра.ДатаНачала;
	ПериодСегодня = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
	НачалоЭтогоДня = ПериодСегодня.ДатаНачала;
	ПериодВчера = Новый СтандартныйПериод(ВариантСтандартногоПериода.Вчера);
	НачалоВчерашнегоДня = ПериодВчера.ДатаНачала;
	
	ДатаДень = НачалоДня(Дата);
	Если Дата >= НачалоСледующегоГода Или Дата < НачалоЭтогоГода Или ПолнаяДата Тогда
		Если КраткоеОписание Тогда
			ФорматДаты = "d MMM";
		Иначе
			ФорматДаты = "d MMMM";
		КонецЕсли;
		Если ВключатьОписаниеГода Тогда
			ФорматДаты = ФорматДаты + " yyyy";
		КонецЕсли;
	ИначеЕсли ДатаДень = НачалоЗавтрашнегоДня Тогда
		ФорматДаты = "За''в''тра";
	ИначеЕсли ДатаДень = НачалоЭтогоДня Тогда
		ФорматДаты = "Се''г''о''д''ня";
	ИначеЕсли ДатаДень = НачалоВчерашнегоДня Тогда
		ФорматДаты = "В''ч''ера";
	ИначеЕсли (Дата < НачалоСледующегоГода И Дата >= НачалоЗавтрашнегоДня) Или (Дата < НачалоВчерашнегоДня И Дата >= НачалоЭтогоГода) Тогда
		Если КраткоеОписание Тогда
			ФорматДаты = "d MMM";
		Иначе
			ФорматДаты = "d MMMM";
		КонецЕсли;
	КонецЕсли;
	
	Если Не ВесьДень Тогда
		ФорматДаты = ФорматДаты + " HH:mm";
	КонецЕсли;
	
	ФорматДаты = "ДФ='" + ФорматДаты + "'";
	ОписаниеДаты = Формат(Дата, ФорматДаты);
	ОписаниеДаты = НРег(ОписаниеДаты);
	
	Возврат ОписаниеДаты;
	
КонецФункции

функция ДлительностьВСекундахВСтроку(ДлительностьСек) Экспорт
	
	ДлительностьСтр = "";
	
	Дней = Цел(ДлительностьСек / 86400); // 86400 - число секунд в сутках
	ПодписьДней = ПолучитьПодписьДней(Дней);
	
	Часов = Цел((ДлительностьСек - Дней * 86400) / 3600); // 86400 - число секунд в сутках
	ПодписьЧасов = ПолучитьПодписьЧасов(Часов);
	
	Минут = Цел((ДлительностьСек - Дней * 86400 - Часов * 3600) / 60); // 86400 - число секунд в сутках
	ПодписьМинут = ПолучитьПодписьМинут(Минут);
	
	Если Дней > 0 Тогда 
		ДлительностьСтр = ДлительностьСтр + Строка(Дней) + " " + ПодписьДней;
	КонецЕсли;
	
	Если Часов > 0 Тогда 
		
		Если Дней > 0 Тогда
			ДлительностьСтр = ДлительностьСтр + " ";
		КонецЕсли;
		
		ДлительностьСтр = ДлительностьСтр + Строка(Часов) + " " + ПодписьЧасов;
	КонецЕсли;
	
	Если Минут > 0 Тогда 
		
		Если Дней > 0 Или Часов > 0 Тогда
			ДлительностьСтр = ДлительностьСтр + " ";
		КонецЕсли;
		
		ДлительностьСтр = ДлительностьСтр + Строка(Минут) + " " + ПодписьМинут;
	КонецЕсли;
	
	Возврат ДлительностьСтр;
	
Конецфункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2';vi='%1 đã có trong %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
// Примечание:
//  В случаях, когда число используемых параметров в строке совпадает с числом переданных для подстановки параметров,
//  рекомендуется использовать функцию платформы СтрШаблон.
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
		СтрНайти(Параметр1, "%")
		Или СтрНайти(Параметр2, "%")
		Или СтрНайти(Параметр3, "%")
		Или СтрНайти(Параметр4, "%")
		Или СтрНайти(Параметр5, "%")
		Или СтрНайти(Параметр6, "%")
		Или СтрНайти(Параметр7, "%")
		Или СтрНайти(Параметр8, "%")
		Или СтрНайти(Параметр9, "%");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = СтрНайти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = СтрНайти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

// Подпись к количеству дней по склонениям
Функция ПолучитьПодписьДней(ЧислоДней)
	
	Если ЧислоДней > 10 И ЧислоДней < 20 Тогда
		Подпись = НСтр("en='days';ru='дней';vi='ngày'");
	Иначе
		ПоследниеДвеЦифры = ЧислоДней - Цел(ЧислоДней / 100) * 100;
		ПоследняяЦифра = ЧислоДней - Цел(ЧислоДней / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("en='days';ru='дней';vi='ngày'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = Нстр("en='days';ru='дней';vi='ngày'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("en='day';ru='день';vi='ngày'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("en='days';ru='дня';vi='ngày'");
			Иначе
				Подпись = НСтр("en='days';ru='дней';vi='ngày'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпись к количеству часов по склонениям
Функция ПолучитьПодписьЧасов(ЧислоЧасов)
	
	Если ЧислоЧасов > 10 И ЧислоЧасов < 20 Тогда
		Подпись = НСтр("en='hours';ru='часов';vi='giờ'");
	Иначе
		Срок = ЧислоЧасов - Цел(ЧислоЧасов / 10) * 10;
		Если Срок = 0 Тогда
			Подпись = НСтр("en='hours';ru='часов';vi='giờ'");
		ИначеЕсли Срок = 1 Тогда
			Подпись = Нстр("en='hour';ru='час';vi='giờ'");
		ИначеЕсли Срок < 5 Тогда
			Подпись = НСтр("en='hours';ru='часа';vi='giờ'");
		Иначе
			Подпись = НСтр("en='hours';ru='часов';vi='giờ'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпись к количеству минут по склонениям
Функция ПолучитьПодписьМинут(ЧислоМинут)
	
	Если ЧислоМинут > 10 И ЧислоМинут < 20 Тогда
		Подпись = НСтр("en='minutes';ru='минут';vi='phút'");
	Иначе
		Срок = ЧислоМинут - Цел(ЧислоМинут / 10) * 10;
		Если Срок = 0 Тогда
			Подпись = НСтр("en='minutes';ru='минут';vi='phút'");
		ИначеЕсли Срок = 1 Тогда
			Подпись = НСтр("en='minute';ru='минута';vi='phút'");
		ИначеЕсли Срок < 5 Тогда
			Подпись = НСтр("en='minutes';ru='минуты';vi='phút'");
		Иначе
			Подпись = НСтр("en='minutes';ru='минут';vi='phút'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Формирует текстовое представление дат.
//
// Параметры:
//  ДатаНачала - Дата - Дата начала отсутствия.
//  ДатаОкончания - Дата - Дата окончания отсутствия.
//  ВесьДень - Булево - Признак того что отсутствие на весь день.
//  ПолнаяДата - Булево - Признак того, что дату следует формировать в виде полной даты.
//  ДатаДо - Булево - Флаг, определяющий следует ли включать только дату окончания в описание даты.
//  КраткоеОписание - Булево - Флаг, определяющий следует ли использовать краткий формат даты.
//
// Возвращаемое значение:
//  Строка - Текстовое представление даты отсутствия.
//
Функция ПериодСтрокой(ДатаНачала, ДатаОкончания,
	ВесьДень, ПолнаяДата, ДатаДо, КраткоеОписание) Экспорт
	
	ОписаниеДаты = "";
	
	Если ДатаДо Тогда
		ОписаниеДатыОкончания = СформироватьТекстовоеОписаниеДаты(ДатаОкончания, ВесьДень,
			ПолнаяДата, КраткоеОписание, Истина);
		ОписаниеДаты = ПодставитьПараметрыВСтроку(
			НСтр("en='before';ru='до %1';vi='đến %1'"), ОписаниеДатыОкончания);
	ИначеЕсли НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала) = 0 Тогда
		День = СформироватьТекстовоеОписаниеДаты(ДатаНачала, Истина,
			ПолнаяДата, КраткоеОписание, Истина);
		Если ВесьДень Тогда
			ОписаниеДаты = День;
		Иначе
			ВремяНачала = Формат(ДатаНачала, "ДФ='HH:mm'");
			ВремяОкончания = Формат(ДатаОкончания, "ДФ='HH:mm'");
			Если КраткоеОписание Тогда
				ОписаниеДаты = ПодставитьПараметрыВСтроку(
					НСтр("en='%1 %2 - %3';ru='%1 %2 - %3';vi='%1 %2 - %3'"), День, ВремяНачала, ВремяОкончания);
			Иначе
				ОписаниеДаты = ПодставитьПараметрыВСтроку(
					НСтр("en='%1 from %2 to %3';ru='%1 с %2 по %3';vi='%1 từ %2 đến %3'"), День, ВремяНачала, ВремяОкончания);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ВключатьОписаниеГода = НачалоГода(ДатаНачала) <> НачалоГода(ДатаОкончания);
		ОписаниеДатыНачала = СформироватьТекстовоеОписаниеДаты(ДатаНачала, ВесьДень,
			ПолнаяДата, КраткоеОписание, ВключатьОписаниеГода);
		ОписаниеДатыОкончания = СформироватьТекстовоеОписаниеДаты(ДатаОкончания, ВесьДень,
			ПолнаяДата, КраткоеОписание, Истина);
		Если КраткоеОписание Тогда
			ОписаниеДаты = ПодставитьПараметрыВСтроку(
				НСтр("en='%1 - %2';ru='%1 - %2';vi='%1 - %2'"), ОписаниеДатыНачала, ОписаниеДатыОкончания);
		Иначе
			ОписаниеДаты = ПодставитьПараметрыВСтроку(
				НСтр("en='from %1 to %2';ru='с %1 по %2';vi='từ %1 đến %2'"), ОписаниеДатыНачала, ОписаниеДатыОкончания);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеДаты;
	
КонецФункции

#КонецОбласти
